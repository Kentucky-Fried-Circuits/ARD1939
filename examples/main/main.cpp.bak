/*
 * 93-0000220
 *
 * SPDX-FileCopyrightText: 2023 Solar Stik, Inc. All rights reserved.
 *
 * SPDX-License-Identifier: SEE LICENSE IN LICENSE.md
 */
/* Includes */
// standard C/C++ libraries
#include <stdio.h>
#include <string.h>
#include <inttypes.h>
#include "sdkconfig.h"
#include "time.h"
#include <sys/unistd.h>
#include <sys/stat.h>

// freertos libraries
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
// #include "freertos/queue.h"
// #include "freertos/semphr.h"

// ESP-IDF libraries
// #include "esp_chip_info.h"
// #include "esp_flash.h"
#include "esp_log.h"
#include "esp_check.h"
#include "esp_event.h"
#include "esp_log.h"

// ESP-IDF drivers and components
#include "driver/gpio.h"
#include "driver/twai.h"
#include "driver/i2c.h"
#include "driver/uart.h"

// 3rd party drivers
#include <sx1509.hpp>

/* definitions */
// Board to use
// #define REMOTE_MONITOR_PCB_VERSION 'A'
#define REMOTE_MONITOR_PCB_VERSION 'B'
// tests to run
#define TEST_SX1509
// #define TEST_DS3232
#define TEST_LED
// #define TEST_CAN
// #define LOG_MODE (ESP_LOG_DEBUG) // for development
#define LOG_MODE (ESP_LOG_DEBUG) // for deployment

// test dependencies
#ifndef TEST_SX1509
#undef TEST_LED
#endif

// ESP32 GPIO pins
#define ESP32_DI (GPIO_NUM_4)
#define ESP32_CAN_TX (GPIO_NUM_5)
#define ESP32_NRESET (GPIO_NUM_17) // general-purpose reset signal to peripherals, mainly to reset I2C devices
#define ESP32_SCL (GPIO_NUM_16)    /*!< GPIO number used for I2C controller clock */
#define ESP32_SDA (GPIO_NUM_33)    // 2 for REV -, 33 for REV A /*!< GPIO number used for I2C controller data  */
#define ESP32_IO_NINT (GPIO_NUM_34)
#define ESP32_CAN_RX (GPIO_NUM_35)
#define ESP32_RO (GPIO_NUM_36)

// SX1509 Pins:
const uint8_t SX1509_LED_RED = 0;
const uint8_t SX1509_LED_GREEN = 1;
const uint8_t SX1509_NINT_SQW = 3;
#if REMOTE_MONITOR_PCB_VERSION == 'A'
const uint8_t SX1509_SD_CS = 4;
#endif
const uint8_t SX1509_STBY = 5;
const uint8_t SX1509_RELAY1 = 6;
const uint8_t SX1509_RELAY2 = 7;
const uint8_t SX1509_SW1_1 = 8; // 8 is allocated to GEN_CONTROL_ON(?)
const uint8_t SX1509_SW1_2 = 9; // 9 is allocated to GEN_CONTROL_AUTO(?)
const uint8_t SX1509_RE = 10;
const uint8_t SX1509_DE = 11;

// I2C
#define I2C_CONTROLLER_NUM 0            /*!< I2C controller i2c port number, the number of i2c peripheral interfaces available will depend on the chip */
#define I2C_CONTROLLER_FREQ_HZ 400000   /*!< I2C controller clock frequency */
#define I2C_CONTROLLER_TX_BUF_DISABLE 0 /*!< I2C controller doesn't need buffer */
#define I2C_CONTROLLER_RX_BUF_DISABLE 0 /*!< I2C controller doesn't need buffer */
#define I2C_CONTROLLER_TIMEOUT_MS 1000
#if REMOTE_MONITOR_PCB_VERSION == 'A'
#define I2C_SX1509_ADDR (0x3E)
#else
#define I2C_SX1509_ADDR (0x3F)
#endif
// #define I2C_DISPLAY_LCD_ADDR (0x3E)
// #define I2C_DISPLAY_BACKLIGHT_ADDR (0x60)
// #define I2C_DISPLAY_SX1509_ADDR (0x71) // jumper configurable

// ADM2582 RS485/RS422 FIXME change ECHO_ to RS_
#define RS_UART_PORT_NUM (1)
#define RS_UART_BAUD_RATE (19200)
#define RS_TASK_STACK_SIZE (2048)
#define RS_BUF_SIZE (1024)

// Ethernet
// #define USE_INTERNAL_ETHERNET 1
#define ETH_PHY_LAN87XX 1
#define ETH_MDC_GPIO 23
#define ETH_MDIO_GPIO 18
#define ETH_PHY_RST_GPIO -1
#define ETH_PHY_ADDR 0

// CAN FIXME all the CAN code copied from twai_network_example and is untested.
#define PING_PERIOD_MS 100
#define NO_OF_DATA_MSGS 2
#define NO_OF_ITERS 1
#define ITER_DELAY_MS 1000
#define RX_TASK_PRIO 8
#define TX_TASK_PRIO 9
#define CTRL_TSK_PRIO 10

// Sample CAN IDs
#define ID_MASTER_STOP_CMD 0x0A0
#define ID_MASTER_START_CMD 0x0A1
#define ID_MASTER_PING 0x0A2
#define ID_SLAVE_STOP_RESP 0x0B0
#define ID_SLAVE_DATA 0x0B1
#define ID_SLAVE_PING_RESP 0x0B2

// static const twai_timing_config_t t_config = TWAI_TIMING_CONFIG_25KBITS();
static const twai_timing_config_t t_config = TWAI_TIMING_CONFIG_250KBITS();
static const twai_filter_config_t f_config = TWAI_FILTER_CONFIG_ACCEPT_ALL();
static const twai_general_config_t g_config = TWAI_GENERAL_CONFIG_DEFAULT(ESP32_CAN_TX, ESP32_CAN_RX, TWAI_MODE_NORMAL);

static const twai_message_t ping_message = {{.ss = 0x01}, .identifier = ID_MASTER_PING, .data_length_code = 0, .data = {0, 0, 0, 0, 0, 0, 0, 0}};
static const twai_message_t start_message = {{.ss = 0x00}, .identifier = ID_MASTER_START_CMD, .data_length_code = 0, .data = {0, 0, 0, 0, 0, 0, 0, 0}};
static const twai_message_t stop_message = {{.ss = 0x00}, .identifier = ID_MASTER_STOP_CMD, .data_length_code = 0, .data = {0, 0, 0, 0, 0, 0, 0, 0}};

// ** lazy globals
esp_err_t can_err = ESP_OK; // a lazy global flag for a local purpose

static QueueHandle_t tx_task_queue;
static QueueHandle_t rx_task_queue;
static SemaphoreHandle_t stop_ping_sem;
static SemaphoreHandle_t ctrl_task_sem;
static SemaphoreHandle_t done_sem;
typedef enum
{
    TX_SEND_PINGS,
    TX_SEND_START_CMD,
    TX_SEND_STOP_CMD,
    TX_TASK_EXIT,
} tx_task_action_t;

typedef enum
{
    RX_RECEIVE_PING_RESP,
    RX_RECEIVE_DATA,
    RX_RECEIVE_STOP_RESP,
    RX_TASK_EXIT,
} rx_task_action_t;


static const char *TAG = "93-0000220";
static const char *TAG_CAN = "93-0000220 CAN";
// static const char *TAG_UI = "93-0000220 UI";

// macros
#define DELAY(X) vTaskDelay(pdMS_TO_TICKS(X)) // emulate Arduino delay()

/* forward declarations*/
esp_err_t set_static_ip();
static void twai_receive_task(void *arg);
static void twai_transmit_task(void *arg);
static void twai_control_task(void *arg);

/* instantiations */
SX1509 io;
// LiquidCrystal_I2C lcd(I2C_DISPLAY_LCD_ADDR, /*lcdCols*/ 16, /*lcdRows*/ 2);


/**
 * @brief i2c controller initialization
 */
static esp_err_t i2c_begin(void)
{
    int i2c_controller_port = I2C_CONTROLLER_NUM;

    i2c_config_t conf = {
        .mode = I2C_MODE_MASTER,
        .sda_io_num = ESP32_SDA,
        .scl_io_num = ESP32_SCL,
        .sda_pullup_en = GPIO_PULLUP_ENABLE,
        .scl_pullup_en = GPIO_PULLUP_ENABLE,
        .master = {
            .clk_speed = I2C_CONTROLLER_FREQ_HZ},
        .clk_flags = 0};

    i2c_param_config(i2c_controller_port, &conf);

    return i2c_driver_install(i2c_controller_port, conf.mode, I2C_CONTROLLER_RX_BUF_DISABLE, I2C_CONTROLLER_TX_BUF_DISABLE, 0);
}


/**
 * @brief emulate Arduino pinMode()
 *
 * @param pin
 * @param pin_mode
 * @return esp_err_t
 *
 */
esp_err_t pinMode(gpio_num_t pin, unsigned long pin_mode)
{
    gpio_config_t io_config;
    io_config.pin_bit_mask = (1ULL << pin);
    if (pin_mode == OUTPUT)
    {
        io_config.mode = GPIO_MODE_OUTPUT;
        io_config.pull_up_en = GPIO_PULLUP_DISABLE;
        io_config.pull_down_en = GPIO_PULLDOWN_DISABLE;
        io_config.intr_type = GPIO_INTR_DISABLE;
    }
    else
    {
        ESP_LOGE(TAG, "output mode %ld not yet supported", pin_mode);
    }
    return gpio_config(&io_config);
}

// esp_err_t pinModeOutput(gpio_num_t pin)
// {
//     gpio_config_t io_config;
//     io_config.pin_bit_mask = (1ULL << pin);
//     io_config.mode = GPIO_MODE_OUTPUT;
//     io_config.pull_up_en = GPIO_PULLUP_DISABLE;
//     io_config.pull_down_en = GPIO_PULLDOWN_DISABLE;
//     io_config.intr_type = GPIO_INTR_DISABLE;
//     return gpio_config(&io_config);
// }

/**
 * @brief block until a key is pressed on stdin
 *
 */
int press_any_key()
{
    int mychar = -1;
    while (mychar == -1)
    {
        mychar = getchar();
        vTaskDelay(1);
    }
    return mychar;
}

void restart()
{
    printf("Restarting in ");
    for (int i = 10; i >= 0; i--)
    {
        printf("%d...", i);
        fflush(stdout);
        DELAY(1000);
    }
    printf("restarting now.\n");
    fflush(stdout);
    esp_restart();
}

/**
 * @brief Set the ~reset pin on the local SX1509 to reset, enable or disable it
 *
 * @param level 0 - disable, 1 - enable, toggle 1, 0, 1 to reset
 * @return esp_err_t
 */
esp_err_t set_nreset(uint32_t level)
{
    // pinModeOutput(ESP32_NRESET);
    ESP_RETURN_ON_ERROR(pinMode(ESP32_NRESET, OUTPUT), TAG, "Unable to set pin mode for ~Reset");
    // disable/enable SX1509
    ESP_RETURN_ON_ERROR(gpio_set_level(ESP32_NRESET, level), TAG, "Unable to set ~Reset pin to %d", level);
    return ESP_OK;
}


esp_err_t test_can()
{
    can_err = ESP_OK;
    ESP_LOGD(TAG_CAN, "started");
    ESP_LOGI(TAG_CAN, "Connect PCAN-USB pin 2 to 05-1000193 J4-2 (CAN_L) and PCAN-USB pin 7 to J4-1 (CAN_H)");
    ESP_LOGI(TAG_CAN, "Plug PCAN-USB into computer, start PCAN-View software.");
    ESP_LOGI(TAG_CAN, "Create a Transmit Message with: Extended Frame unchecked, Cycle Time 0, ID 0B2, and Cycle Time 1000.");

    // enable can xceiver
    ESP_ERROR_CHECK(io.pinMode(SX1509_STBY, OUTPUT));
    // io.digitalWrite(SX1509_STBY, HIGH); // low-power (off) mode
    io.digitalWrite(SX1509_STBY, LOW); // enable CAN chip in high-speed mode

    // Create tasks, queues, and semaphores
    rx_task_queue = xQueueCreate(1, sizeof(rx_task_action_t));
    tx_task_queue = xQueueCreate(1, sizeof(tx_task_action_t));
    ctrl_task_sem = xSemaphoreCreateBinary();
    stop_ping_sem = xSemaphoreCreateBinary();
    done_sem = xSemaphoreCreateBinary();
    xTaskCreatePinnedToCore(twai_receive_task, "TWAI_rx", 4096, NULL, RX_TASK_PRIO, NULL, tskNO_AFFINITY);
    xTaskCreatePinnedToCore(twai_transmit_task, "TWAI_tx", 4096, NULL, TX_TASK_PRIO, NULL, tskNO_AFFINITY);
    xTaskCreatePinnedToCore(twai_control_task, "TWAI_ctrl", 4096, NULL, CTRL_TSK_PRIO, NULL, tskNO_AFFINITY);

    // Install TWAI driver
    ESP_ERROR_CHECK(twai_driver_install(&g_config, &t_config, &f_config));
    ESP_LOGD(TAG_CAN, "Driver installed");

    xSemaphoreGive(ctrl_task_sem);           // Start control task
    xSemaphoreTake(done_sem, portMAX_DELAY); // Wait for completion
    // Uninstall TWAI driver
    ESP_ERROR_CHECK(twai_driver_uninstall());
    ESP_LOGD(TAG_CAN, "Driver uninstalled");
    // Cleanup
    vQueueDelete(rx_task_queue);
    vQueueDelete(tx_task_queue);
    vSemaphoreDelete(ctrl_task_sem);
    vSemaphoreDelete(stop_ping_sem);
    vSemaphoreDelete(done_sem);
    if (can_err == ESP_OK)
    {
        ESP_LOGW(TAG_CAN, "If there is a message in PCAN-View with ID 01Ah then press P. Otherwise press any other key");
        int mychar = press_any_key();
        if (mychar != 'P' && mychar != 'p')
        {
            can_err = ESP_ERR_INVALID_RESPONSE;
        }
    }

    ESP_LOGD(TAG_CAN, "completed");
    return can_err;
}


esp_err_t test_hello_world()
{
    ESP_LOGI(TAG, "****************************************************************************************************************************");
    ESP_LOGI(TAG,
             "*** Test started                                                                                                         ***");
    ESP_LOGI(TAG, "****************************************************************************************************************************");
    return ESP_OK;
}


esp_err_t test_i2c_scan()
{
    esp_err_t ret;
    bool ds3232_found = false;
    bool sx1509_found = false;
    bool unknown_found = false;
    // i2c init & scan
    // if (i2c_controller_init() != ESP_OK)
    //     ESP_LOGE(TAG, "i2c init failed\n");
    ESP_LOGD(TAG, "I2C Scan: start");
    for (uint8_t i = 1; i < 127; i++)
    {
        i2c_cmd_handle_t cmd = i2c_cmd_link_create();
        i2c_master_start(cmd);
        i2c_master_write_byte(cmd, (i << 1) | I2C_MASTER_WRITE, 1);
        i2c_master_stop(cmd);
        ret = i2c_master_cmd_begin(I2C_NUM_0, cmd, 10 / portTICK_PERIOD_MS);
        i2c_cmd_link_delete(cmd);

        if (ret == ESP_OK)
        {
            if (i == 0x3e)
            { // SX1509 on REV - and REV A
#if REMOTE_MONITOR_PCB_VERSION == 'A'
                ESP_LOGD(TAG, "test_i2c_scan(): found something at on-board SX1509 or DFRobot 1602 LCD address 0x%2x", i);
#else
                ESP_LOGD(TAG, "I2C Scan: found something at Magnethereal Display DFRobot 1602 LCD address 0x%2x", i); // it's okay if this is connected
#endif
            }
            else if (i == 0x3f)
            { // SX1509 on board
                ESP_LOGD(TAG, "I2C Scan: found something at SX1509 address 0x%2x", i);
                sx1509_found = true;
            }
            else if (i == 0x60)
            {
                ESP_LOGD(TAG, "I2C Scan: found something at Magnethereal Display DFRobot 1602 backlight address 0x%2x", i); // it's okay if this is connected
            }
            else if (i == 0x68)
            {
                ESP_LOGD(TAG, "I2C Scan: found something at DS3232 clock address 0x%2x", i);
                ds3232_found = true;
            }
            else if (i == 0x70)
            {
                ESP_LOGD(TAG, "I2C Scan: found something at off-board SX1509 address 0x%2x", i); // it's okay if this is connected
            }
            else if (i == 0x71)
            {
                ESP_LOGD(TAG, "I2C Scan: found something at off-board SX1509 address 0x%2x", i); // it's okay if this is connected
            }
            else
            {
                ESP_LOGE(TAG, "FAILED! I2C Scan: unexpected device found at 0x%2x", i);
                unknown_found = true;
            }
        }
    }
    ESP_LOGD(TAG, "I2C Scan: complete");
    if (!ds3232_found)
    {
        ESP_LOGE(TAG, "FAILED! I2C Scan: onboard DS3232 Real Time Clock not found at 0x68");
        return ESP_ERR_NOT_FOUND;
    }
    if (!sx1509_found)
    {
        ESP_LOGE(TAG, "FAILED! I2C Scan: onboard SX1509 I/O Expander not found at 0x3F");
        return ESP_ERR_NOT_FOUND;
    }
    if (unknown_found)
    {
        ESP_LOGE(TAG, "I2C Scan: unknown device found");
    }
    return ESP_OK;
}

esp_err_t test_led()
{
    esp_err_t ret;

    ESP_LOGD(TAG, "test_led(): start");

    ret = io.pinMode(SX1509_LED_GREEN, OUTPUT); // Set LED pin to OUTPUT
    if (ret != ESP_OK)
        ESP_LOGE(TAG, "TEST LED: io.pinMode(%i, OUTPUT) returned %i", SX1509_LED_GREEN, ret);
    ret = io.pinMode(SX1509_LED_RED, OUTPUT); // Set LED pin to OUTPUT
    if (ret != ESP_OK)
        ESP_LOGE(TAG, "TEST LED: io.pinMode(%i, OUTPUT) returned %i", SX1509_LED_RED, ret);
    // Blink the green LED pin
    // Blink the red LED pin
    // Blink time resolution is 5 bit
    // The timing parameters are in milliseconds, but they
    // aren't 100% exact. The library will estimate to try to
    // get them as close as possible. Play with the clock
    // divider to maybe get more accurate timing.

    ESP_LOGD(TAG, "test_led(): blink green");
    ret = io.blink(SX1509_LED_GREEN, 100, 900);
    if (ret != ESP_OK)
    {
        ESP_LOGE(TAG, "io.blink(%i, 100, 900) returned %i", SX1509_LED_GREEN, ret);
        return ret;
    }
    ESP_LOGW(TAG, "TEST LED: Verify green LED is blinking");
    ret = io.blink(SX1509_LED_RED, 100, 1900);
    if (ret != ESP_OK)
    {
        ESP_LOGE(TAG, "io.blink(%i, 100, 1900) returned %i", SX1509_LED_RED, ret);
        return ret;
    }
    ESP_LOGW(TAG, "TEST LED: Verify red LED is blinking");
    ESP_LOGW(TAG, "Press any key to continue");
    press_any_key();
    ESP_LOGD(TAG, "test_led(): complete");
    return ret;
}


/**
 * @brief verify we are communicating with the onboard sx1509
 *
 * @return esp_err_t result of io.begin() if it fails, else result of io.clock()
 */
esp_err_t test_sx1509()
{
    esp_err_t ret;
    ESP_LOGD(TAG, "test_sx1509(): start");

    i2c_dev_t dev;
    dev.port = I2C_NUM_0;
    dev.cfg.sda_io_num = ESP32_SDA;
    dev.cfg.scl_io_num = ESP32_SCL;
    dev.cfg.master.clk_speed = 400000;
    dev.cfg.clk_flags = 0;

    ret = io.begin(&dev, I2C_SX1509_ADDR, ESP32_NRESET, ESP32_IO_NINT);
    if (ret != ESP_OK)
    {
        ESP_LOGE(TAG, "io.begin(I2C_SX1509_ADDR) returned %i", ret); // TODO set BIT
        return ret;
    }
    ret = io.clock(INTERNAL_CLOCK_2MHZ, 4);
    if (ret != ESP_OK)
    {
        ESP_LOGE(TAG, "io.clock(INTERNAL_CLOCK_2MHZ, 4) returned %i", ret); // TODO set BIT
        return ret;
    }
    ESP_LOGD(TAG, "test_sx1509(): complete");
    return ret;
}

/**
 * @brief task to receive CAN messages
 *
 * @param arg
 */
static void twai_receive_task(void *arg)
{
    while (1)
    {
        rx_task_action_t action;
        xQueueReceive(rx_task_queue, &action, portMAX_DELAY);

        if (action == RX_RECEIVE_PING_RESP)
        {
            // Listen for ping response from slave
            while (1)
            {
                twai_message_t rx_msg;
                twai_receive(&rx_msg, portMAX_DELAY);
                if (rx_msg.identifier == ID_SLAVE_PING_RESP)
                {
                    ESP_LOGD(TAG_CAN, "ID_SLAVE_PING_RESP %d received", rx_msg.identifier);
                    xSemaphoreGive(stop_ping_sem);
                    xSemaphoreGive(ctrl_task_sem);
                    break;
                }
            }
        }
        else if (action == RX_RECEIVE_DATA)
        {
            // Receive data messages from slave
            uint32_t data_msgs_rec = 0;
            int myChar;
            ESP_LOGW(TAG_CAN, "Press A to abort CAN test");
            can_err = ESP_OK;
            while (data_msgs_rec < NO_OF_DATA_MSGS)
            {
                twai_message_t rx_msg;
                // twai_receive(&rx_msg, portMAX_DELAY);
                twai_receive(&rx_msg, pdMS_TO_TICKS(10));
                if (rx_msg.identifier == ID_SLAVE_DATA)
                {
                    ESP_LOGD(TAG_CAN, "ID_SLAVE_DATA %d received", rx_msg.identifier);
                    uint32_t data = 0;
                    for (int i = 0; i < rx_msg.data_length_code; i++)
                    {
                        data |= (rx_msg.data[i] << (i * 8));
                    }
                    ESP_LOGD(TAG_CAN, "Received data value %" PRIu32, data);
                    data_msgs_rec++;
                }
                myChar = getchar();
                if (myChar == char('A') || myChar == char('a')) // abort test
                {
                    can_err = ESP_FAIL;
                    break;
                }
            }
            xSemaphoreGive(ctrl_task_sem);
        }
        else if (action == RX_RECEIVE_STOP_RESP)
        {
            // // Listen for stop response from slave
            // while (1)
            // {
            //     twai_message_t rx_msg;
            //     twai_receive(&rx_msg, portMAX_DELAY);
            //     if (rx_msg.identifier == ID_SLAVE_STOP_RESP)
            //     {
            xSemaphoreGive(ctrl_task_sem);
            //         break;
            //     }
            // }
        }
        else if (action == RX_TASK_EXIT)
        {
            break;
        }
    }
    vTaskDelete(NULL);
}

static void twai_transmit_task(void *arg)
{
    // ping_message.ss = 1; // FIXME can't figure out how to initialize this flag in the definition
    while (1)
    {
        tx_task_action_t action;
        xQueueReceive(tx_task_queue, &action, portMAX_DELAY);

        if (action == TX_SEND_PINGS)
        {
            // Repeatedly transmit pings
            ESP_LOGD(TAG_CAN, "Transmitting ping");

            xSemaphoreTake(stop_ping_sem, portMAX_DELAY); // TEST
            ESP_LOGD(TAG_CAN, "got stop_ping_sem");
            for (int i = 0; i < 10; i++)
            {
                twai_transmit(&ping_message, portMAX_DELAY);
                printf(".");
                fflush(stdout);
                DELAY(PING_PERIOD_MS);
            }
            printf("\n");
        }
        else if (action == TX_SEND_START_CMD)
        {
            // Transmit start command to slave
            twai_transmit(&start_message, portMAX_DELAY);
            ESP_LOGD(TAG_CAN, "Transmitted start command");
        }
        else if (action == TX_SEND_STOP_CMD)
        {
            // Transmit stop command to slave
            twai_transmit(&stop_message, portMAX_DELAY);
            ESP_LOGD(TAG_CAN, "Transmitted stop command");
        }
        else if (action == TX_TASK_EXIT)
        {
            break;
        }
        else
        {
            ESP_LOGE(TAG_CAN, "unexpected action:%i", action);
            break;
        }
    }
    ESP_LOGD(TAG_CAN, "transmit task complete");
    vTaskDelete(NULL);
}

static void twai_control_task(void *arg)
{
    xSemaphoreTake(ctrl_task_sem, portMAX_DELAY);
    tx_task_action_t tx_action;
    rx_task_action_t rx_action;

    for (int iter = 0; iter < NO_OF_ITERS; iter++)
    {
        ESP_ERROR_CHECK(twai_start());
        ESP_LOGD(TAG_CAN, "Driver started");

        // Start transmitting pings, and listen for ping response
        // tx_action = TX_SEND_PINGS;
        // rx_action = RX_RECEIVE_PING_RESP;
        // xQueueSend(tx_task_queue, &tx_action, portMAX_DELAY);
        // xQueueSend(rx_task_queue, &rx_action, portMAX_DELAY);

        // Send Start command to slave, and receive data messages
        // xSemaphoreTake(ctrl_task_sem, portMAX_DELAY);
        tx_action = TX_SEND_START_CMD;
        rx_action = RX_RECEIVE_DATA;
        xQueueSend(tx_task_queue, &tx_action, portMAX_DELAY);
        xQueueSend(rx_task_queue, &rx_action, portMAX_DELAY);

        // Send Stop command to slave when enough data messages have been received. Wait for stop response
        xSemaphoreTake(ctrl_task_sem, portMAX_DELAY);
        ESP_LOGD(TAG_CAN, "Sending stop command");
        tx_action = TX_SEND_STOP_CMD;
        rx_action = RX_RECEIVE_STOP_RESP;
        xQueueSend(tx_task_queue, &tx_action, portMAX_DELAY);
        xQueueSend(rx_task_queue, &rx_action, portMAX_DELAY);

        xSemaphoreTake(ctrl_task_sem, portMAX_DELAY);
        ESP_ERROR_CHECK(twai_stop());
        ESP_LOGI(TAG, "Driver stopped");
        DELAY(ITER_DELAY_MS);
    }
    // Stop TX and RX tasks
    tx_action = TX_TASK_EXIT;
    rx_action = RX_TASK_EXIT;
    xQueueSend(tx_task_queue, &tx_action, portMAX_DELAY);
    xQueueSend(rx_task_queue, &rx_action, portMAX_DELAY);

    // Delete Control task
    xSemaphoreGive(done_sem);
    vTaskDelete(NULL);
}

extern "C" void app_main(void)
{

    // esp_log_level_set("*", ESP_LOG_INFO);
    esp_log_level_set("*", LOG_MODE);
    esp_log_level_set(TAG, ESP_LOG_DEBUG);
    esp_log_level_set("gpio", ESP_LOG_WARN);
    esp_log_level_set("intr_alloc", ESP_LOG_WARN);
    esp_log_level_set("sx1509", ESP_LOG_WARN);
    esp_log_level_set("i2cdev", LOG_MODE);
    if (LOG_MODE < ESP_LOG_DEBUG)
    {
        esp_log_level_set("system_api", ESP_LOG_WARN);
    }
    esp_log_level_set(TAG, LOG_MODE); // set *TAG to debug. This works, but I'd rather use the LOG_LOCAL_LEVEL macro. Also didn't work to put this in main() TEST
    esp_err_t ret;
    bool failed = false;

    test_hello_world();

    // I2C-dependent tests
    if (set_nreset(1) == ESP_OK)
    {
        ESP_LOGI(TAG, "Sending reset passed");
        ret = i2c_begin();
        if (ret == ESP_OK)
        {
            ESP_LOGI(TAG, "I2C begin passed");
            ret = test_i2c_scan();
            if (ret == ESP_OK)
            {
                ESP_LOGI(TAG, "I2C Scan passed");
#ifdef TEST_SX1509
                ret = test_sx1509();
                if (ret == ESP_OK)
                {
                    ESP_LOGI(TAG, "SX1509 Test passed");
                }
                else
                {
                    failed = true;
                    ESP_LOGE(TAG, "SX1509 Test failed");
                }
#else
                ESP_LOGW(TAG, "SX1509 Test skipped");
#endif
#ifdef TEST_LED
                    ret = test_led();
                    if (ret == ESP_OK)
                    {
                        ESP_LOGI(TAG, "LED Test complete");
                    }
                    else
                    {
                        failed = true;
                        ESP_LOGE(TAG, "LED Test failed");
                    }
#else
                ESP_LOGW(TAG, "LED Test skipped");
#endif
            }
            else
            {
                failed = true;
                ESP_LOGE(TAG, "I2C Scan failed");
            }
        }
        else
        {
            failed = true;
            ESP_LOGE(TAG, "I2C begin failed. ommunication. Tests that depend on I2C skipped.");
        }
    }
    else
    {
        failed = true;
        ESP_LOGE(TAG, "Setting ~Reset failed. Tests that depend on I2C skipped.");
    }
    DELAY(1000); // TEST 2s okay. Test 1s. Wait for RS485 to settle. TODO There appears to be some contention on the SX1509; maybe make access atomic or exclusive?
#ifdef TEST_CAN
    if (test_can() == ESP_OK)
    {
        ESP_LOGI(TAG, "CAN Test passed");
    }
    else
    {
        failed = true;
        ESP_LOGE(TAG, "CAN Test failed");
    }
#endif
    if (failed)
    {
        ESP_LOGE(TAG, "*** TEST FAILED ***");
    }
    else
    {
        ESP_LOGI(TAG, "*** All tests passed ***");
    }

}
